// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: broker/v1/broker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuntimeBroker_Tender_FullMethodName = "/broker.knita.io.RuntimeBroker/Tender"
	RuntimeBroker_Settle_FullMethodName = "/broker.knita.io.RuntimeBroker/Settle"
)

// RuntimeBrokerClient is the client API for RuntimeBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeBrokerClient interface {
	Tender(ctx context.Context, in *RuntimeTender, opts ...grpc.CallOption) (*RuntimeContracts, error)
	Settle(ctx context.Context, in *RuntimeContract, opts ...grpc.CallOption) (*RuntimeSettlement, error)
}

type runtimeBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeBrokerClient(cc grpc.ClientConnInterface) RuntimeBrokerClient {
	return &runtimeBrokerClient{cc}
}

func (c *runtimeBrokerClient) Tender(ctx context.Context, in *RuntimeTender, opts ...grpc.CallOption) (*RuntimeContracts, error) {
	out := new(RuntimeContracts)
	err := c.cc.Invoke(ctx, RuntimeBroker_Tender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeBrokerClient) Settle(ctx context.Context, in *RuntimeContract, opts ...grpc.CallOption) (*RuntimeSettlement, error) {
	out := new(RuntimeSettlement)
	err := c.cc.Invoke(ctx, RuntimeBroker_Settle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeBrokerServer is the server API for RuntimeBroker service.
// All implementations must embed UnimplementedRuntimeBrokerServer
// for forward compatibility
type RuntimeBrokerServer interface {
	Tender(context.Context, *RuntimeTender) (*RuntimeContracts, error)
	Settle(context.Context, *RuntimeContract) (*RuntimeSettlement, error)
	mustEmbedUnimplementedRuntimeBrokerServer()
}

// UnimplementedRuntimeBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeBrokerServer struct {
}

func (UnimplementedRuntimeBrokerServer) Tender(context.Context, *RuntimeTender) (*RuntimeContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tender not implemented")
}
func (UnimplementedRuntimeBrokerServer) Settle(context.Context, *RuntimeContract) (*RuntimeSettlement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settle not implemented")
}
func (UnimplementedRuntimeBrokerServer) mustEmbedUnimplementedRuntimeBrokerServer() {}

// UnsafeRuntimeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeBrokerServer will
// result in compilation errors.
type UnsafeRuntimeBrokerServer interface {
	mustEmbedUnimplementedRuntimeBrokerServer()
}

func RegisterRuntimeBrokerServer(s grpc.ServiceRegistrar, srv RuntimeBrokerServer) {
	s.RegisterService(&RuntimeBroker_ServiceDesc, srv)
}

func _RuntimeBroker_Tender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuntimeTender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeBrokerServer).Tender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeBroker_Tender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeBrokerServer).Tender(ctx, req.(*RuntimeTender))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeBroker_Settle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuntimeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeBrokerServer).Settle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeBroker_Settle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeBrokerServer).Settle(ctx, req.(*RuntimeContract))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeBroker_ServiceDesc is the grpc.ServiceDesc for RuntimeBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.knita.io.RuntimeBroker",
	HandlerType: (*RuntimeBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tender",
			Handler:    _RuntimeBroker_Tender_Handler,
		},
		{
			MethodName: "Settle",
			Handler:    _RuntimeBroker_Settle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/v1/broker.proto",
}
