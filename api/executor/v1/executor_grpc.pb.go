// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: executor/v1/executor.proto

package v1

import (
	context "context"
	v1 "github.com/knita-io/knita/api/events/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Executor_Introspect_FullMethodName = "/executor.knita.io.Executor/Introspect"
	Executor_Events_FullMethodName     = "/executor.knita.io.Executor/Events"
	Executor_Open_FullMethodName       = "/executor.knita.io.Executor/Open"
	Executor_Heartbeat_FullMethodName  = "/executor.knita.io.Executor/Heartbeat"
	Executor_Exec_FullMethodName       = "/executor.knita.io.Executor/Exec"
	Executor_Import_FullMethodName     = "/executor.knita.io.Executor/Import"
	Executor_Export_FullMethodName     = "/executor.knita.io.Executor/Export"
	Executor_Close_FullMethodName      = "/executor.knita.io.Executor/Close"
)

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorClient interface {
	Introspect(ctx context.Context, in *IntrospectRequest, opts ...grpc.CallOption) (*IntrospectResponse, error)
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Executor_EventsClient, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Import(ctx context.Context, opts ...grpc.CallOption) (Executor_ImportClient, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (Executor_ExportClient, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type executorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorClient(cc grpc.ClientConnInterface) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Introspect(ctx context.Context, in *IntrospectRequest, opts ...grpc.CallOption) (*IntrospectResponse, error) {
	out := new(IntrospectResponse)
	err := c.cc.Invoke(ctx, Executor_Introspect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Executor_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Executor_ServiceDesc.Streams[0], Executor_Events_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executorEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_EventsClient interface {
	Recv() (*v1.Event, error)
	grpc.ClientStream
}

type executorEventsClient struct {
	grpc.ClientStream
}

func (x *executorEventsClient) Recv() (*v1.Event, error) {
	m := new(v1.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, Executor_Open_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, Executor_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Executor_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Import(ctx context.Context, opts ...grpc.CallOption) (Executor_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Executor_ServiceDesc.Streams[1], Executor_Import_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executorImportClient{stream}
	return x, nil
}

type Executor_ImportClient interface {
	Send(*FileTransfer) error
	CloseAndRecv() (*ImportResponse, error)
	grpc.ClientStream
}

type executorImportClient struct {
	grpc.ClientStream
}

func (x *executorImportClient) Send(m *FileTransfer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorImportClient) CloseAndRecv() (*ImportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (Executor_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Executor_ServiceDesc.Streams[2], Executor_Export_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executorExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_ExportClient interface {
	Recv() (*FileTransfer, error)
	grpc.ClientStream
}

type executorExportClient struct {
	grpc.ClientStream
}

func (x *executorExportClient) Recv() (*FileTransfer, error) {
	m := new(FileTransfer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, Executor_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
// All implementations must embed UnimplementedExecutorServer
// for forward compatibility
type ExecutorServer interface {
	Introspect(context.Context, *IntrospectRequest) (*IntrospectResponse, error)
	Events(*EventsRequest, Executor_EventsServer) error
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Import(Executor_ImportServer) error
	Export(*ExportRequest, Executor_ExportServer) error
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	mustEmbedUnimplementedExecutorServer()
}

// UnimplementedExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (UnimplementedExecutorServer) Introspect(context.Context, *IntrospectRequest) (*IntrospectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introspect not implemented")
}
func (UnimplementedExecutorServer) Events(*EventsRequest, Executor_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedExecutorServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedExecutorServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedExecutorServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedExecutorServer) Import(Executor_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedExecutorServer) Export(*ExportRequest, Executor_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedExecutorServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedExecutorServer) mustEmbedUnimplementedExecutorServer() {}

// UnsafeExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorServer will
// result in compilation errors.
type UnsafeExecutorServer interface {
	mustEmbedUnimplementedExecutorServer()
}

func RegisterExecutorServer(s grpc.ServiceRegistrar, srv ExecutorServer) {
	s.RegisterService(&Executor_ServiceDesc, srv)
}

func _Executor_Introspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Introspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Executor_Introspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Introspect(ctx, req.(*IntrospectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).Events(m, &executorEventsServer{stream})
}

type Executor_EventsServer interface {
	Send(*v1.Event) error
	grpc.ServerStream
}

type executorEventsServer struct {
	grpc.ServerStream
}

func (x *executorEventsServer) Send(m *v1.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Executor_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Executor_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Executor_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Executor_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServer).Import(&executorImportServer{stream})
}

type Executor_ImportServer interface {
	SendAndClose(*ImportResponse) error
	Recv() (*FileTransfer, error)
	grpc.ServerStream
}

type executorImportServer struct {
	grpc.ServerStream
}

func (x *executorImportServer) SendAndClose(m *ImportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorImportServer) Recv() (*FileTransfer, error) {
	m := new(FileTransfer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Executor_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).Export(m, &executorExportServer{stream})
}

type Executor_ExportServer interface {
	Send(*FileTransfer) error
	grpc.ServerStream
}

type executorExportServer struct {
	grpc.ServerStream
}

func (x *executorExportServer) Send(m *FileTransfer) error {
	return x.ServerStream.SendMsg(m)
}

func _Executor_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Executor_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Executor_ServiceDesc is the grpc.ServiceDesc for Executor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Executor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "executor.knita.io.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Introspect",
			Handler:    _Executor_Introspect_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _Executor_Open_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Executor_Heartbeat_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Executor_Exec_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Executor_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Executor_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Import",
			Handler:       _Executor_Import_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Export",
			Handler:       _Executor_Export_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "executor/v1/executor.proto",
}
