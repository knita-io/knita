syntax = "proto3";

package executor.knita.io;

option go_package = "github.com/knita-io/knita/api/executor/v1";

import "events/v1/event.proto";
import "google/protobuf/duration.proto";

service Executor {
  rpc Introspect(IntrospectRequest) returns (IntrospectResponse);
  rpc Events(EventsRequest) returns (stream events.knita.io.Event);
  rpc Open(OpenRequest) returns (OpenResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc Exec(ExecRequest) returns (ExecResponse);
  rpc Import(stream FileTransfer) returns (ImportResponse);
  rpc Export(ExportRequest) returns (stream FileTransfer);
  rpc Close(CloseRequest) returns (CloseResponse);
}

message ExecutorInfo {
  string name = 1;
}

message SystemInfo  {
  string os = 2;
  string arch = 3;
  uint32 total_cpu_cores = 4;
  uint64 total_memory = 5;
}

message IntrospectRequest {}
message IntrospectResponse{
  SystemInfo sys_info = 1;
  ExecutorInfo executor_info = 3;
  repeated string labels = 2;
}

message EventsRequest {
  string build_id = 1;
  string runtime_id = 2;
  string barrier_id = 3;
}

message OpenRequest {
  string build_id = 1;
  string runtime_id = 2;
  Opts opts = 3;
}

message OpenResponse {
  string work_directory = 1;
  SystemInfo sys_info = 2;
}

message HeartbeatRequest {
  string runtime_id = 1;
}

message HeartbeatResponse {
  google.protobuf.Duration extended_by = 1;
}

enum RuntimeType {
  RUNTIME_UNSPECIFIED = 0;
  RUNTIME_HOST = 1;
  RUNTIME_DOCKER = 2;
}

message Opts {
  RuntimeType type = 1;
  repeated string labels = 4;   // TODO becomes "label selector". Runner labels become k/v pairs, with the same semantics as event labels.
  map<string, string> tags = 5; // TODO moves up to Event
  oneof opts {
    HostOpts host = 2;
    DockerOpts docker = 3;
  }
}

message HostOpts {}

message DockerOpts {
  DockerPullOpts image = 1;
}

message DockerPullOpts {
  enum PullStrategy {
    PULL_STRATEGY_UNSPECIFIED = 0;
    PULL_STRATEGY_NEVER = 1;
    PULL_STRATEGY_ALWAYS = 2;
    PULL_STRATEGY_NOT_EXISTS = 3;
  }
  string image_uri = 1;
  PullStrategy pull_strategy = 2;
  DockerPullAuth auth = 3;
}

message DockerPullAuth {
  oneof auth {
    BasicAuth basic = 1;
    AWSECRAuth aws_ecr = 2;
  }
}

message BasicAuth {
  string username = 1;
  string password = 2;
}

message AWSECRAuth  {
  string region = 1;
  string aws_access_key_id = 2;
  string aws_secret_key = 3;
}

message ExecRequest {
  string runtime_id = 1;
  string exec_id = 2;
  string barrier_id = 3;
  ExecOpts opts = 4;
}

message ExecOpts {
  string name = 1;
  repeated string args = 2;
  repeated string env = 3;
  map<string, string> tags = 4;
}

message ExecResponse{
  int32 exit_code = 1;
}

message FileTransfer {
  string runtime_id = 1;
  string transfer_id = 2;
  string file_id = 3;
  FileTransferHeader header = 4;
  FileTransferBody body = 5;
  FileTransferTrailer trailer = 6;
}

message FileTransferHeader {
  bool is_dir = 1;
  string src_path = 2;
  string dest_path = 3;
  uint32 mode = 4;
  uint64 size = 5;
}

message FileTransferBody {
  uint64 offset = 1;
  bytes data = 2;
}

message FileTransferTrailer {
  bytes md5 = 1;
}

message ImportResponse {}

message ExportRequest {
  string runtime_id = 1;
  string export_id = 2;
  string src_path = 3;
  ExportOpts opts = 4;
}

message ExportOpts {
  string dest_path = 1;
  repeated string excludes = 2;
}

message CloseRequest {
  string runtime_id = 1;
  string barrier_id = 2;
}

message CloseResponse {}


